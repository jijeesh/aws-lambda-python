{
    "Description": "Stack with Lambda function performing maintenance tasks",
    "Parameters": {
        "AlarmEmail": {
            "Default": "contact@example.com",
            "Description": "Email where Lambda errors alarms should be sent to",
            "Type": "String"
        }
    },
    "Resources": {
        "LambdaBaseErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaBaseFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaBaseFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nimport operator\n\n\ndef lambda_handler(event, context):\n    LIMIT = 10\n    client = boto3.client('ec2', 'eu-west-1')\n\n    response = client.describe_images(\n        Owners=['self'],\n        Filters=[{'Name': 'tag:Type', 'Values': ['BaseImage']}]\n    )\n\n    if len(response['Images']) == 0:\n        raise Exception('no AMIs with Type=BaseImage tag found')\n\n    images = {}\n    for image in response['Images']:\n        for tag in image['Tags']:\n            if tag['Key'] == \"Project\":\n                if tag['Value'] not in images.keys():\n                    images[tag['Value']] = {}\n                images[tag['Value']][image['ImageId']] = image['CreationDate']\n                break\n\n    to_remove = []\n    for project in images:\n        sorted_x = sorted(images[project].items(), key=operator.itemgetter(1), reverse=True)\n        if len(sorted_x) > LIMIT:\n            to_remove = to_remove + [i[0] for i in sorted_x[LIMIT:]]\n\n    if len(to_remove) == 0:\n        print(\"Nothing to do\")\n        return 0\n\n    print(\"Will remove \" + str(len(to_remove)) + \" images\")\n\n    for ami in to_remove:\n        print(\"Removing: \" + ami)\n        client.deregister_image(ImageId=ami)\n\n\nif __name__ == '__main__':\n    lambda_handler(None, None)\n"
                },
                "Description": "Clears Base AMI images",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaCleanImagesRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaCleanEESThrottlesAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaCleanESFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Throttles",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaCleanESErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaCleanESFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaCleanESFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "import os\nimport datetime\nimport hashlib\nimport hmac\nimport urllib2\nimport json\n\nENDPOINTS_ACCOUNTS = {\n    'account-1': 'elastic-search-endpoint',\n    'account-2': 'elastic-search-endpoint',\n}\n\nTHRESHOLD_ACCOUNTS = {\n    'account-1': 20,\n    'account-2': 60\n}\n\n\ndef sign(key, msg):\n    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()\n\n\ndef getSignatureKey(key, dateStamp, regionName, serviceName):\n    kDate = sign(('AWS4' + key).encode('utf-8'), dateStamp)\n    kRegion = sign(kDate, regionName)\n    kService = sign(kRegion, serviceName)\n    kSigning = sign(kService, 'aws4_request')\n    return kSigning\n\n\ndef get_signature(endpoint, method, canonical_uri):\n    region = 'eu-west-1'\n    service = 'es'\n    access_key = os.environ.get('AWS_ACCESS_KEY_ID')\n    secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')\n    session_key = os.environ.get('AWS_SESSION_TOKEN')\n    t = datetime.datetime.utcnow()\n    amzdate = t.strftime('%Y%m%dT%H%M%SZ')\n    datestamp = t.strftime('%Y%m%d')\n    canonical_querystring = ''\n    canonical_headers = 'host:' + endpoint + '\\nx-amz-date:' + amzdate + '\\nx-amz-security-token:' + session_key + \"\\n\"\n    signed_headers = 'host;x-amz-date;x-amz-security-token'\n    payload_hash = hashlib.sha256('').hexdigest()\n    canonical_request = method + '\\n' + canonical_uri + '\\n' + canonical_querystring + '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + payload_hash\n    algorithm = 'AWS4-HMAC-SHA256'\n    credential_scope = datestamp + '/' + region + '/' + service + '/' + 'aws4_request'\n    string_to_sign = algorithm + '\\n' + amzdate + '\\n' + credential_scope + '\\n' + hashlib.sha256(\n        canonical_request).hexdigest()\n    signing_key = getSignatureKey(secret_key, datestamp, region, service)\n    signature = hmac.new(signing_key, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()\n    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature\n    headers = {'x-amz-date': amzdate, 'x-amz-security-token': session_key, 'Authorization': authorization_header}\n    request_url = 'https://' + endpoint + canonical_uri + '?' + canonical_querystring\n\n    return {'url': request_url, 'headers': headers}\n\n\ndef lambda_handler(event, context):\n    INDEXPREFIX = 'cwl-'\n\n    if 'account' in event:\n        if event['account'] not in ENDPOINTS_ACCOUNTS.keys():\n            raise Exception(\"No endpoint configured for account \" + str(event['account']))\n        ENDPOINT = ENDPOINTS_ACCOUNTS[event['account']]\n        TOLEAVE = THRESHOLD_ACCOUNTS[event['account']]\n    else:\n        raise Exception(\"No account specified in event\")\n\n    response = json.loads(get_index_list(ENDPOINT))\n    indexes = []\n    for index in response:\n        if index.startswith(INDEXPREFIX):\n            indexes.append(index)\n\n    indexes.sort(reverse=True)\n    to_remove = indexes[TOLEAVE:]\n    for index in to_remove:\n        print(\"Removing \" + index)\n        delete_index(ENDPOINT, index)\n\n\ndef delete_index(endpoint, index):\n    info = get_signature(endpoint, 'DELETE', '/' + index)\n\n    opener = urllib2.build_opener(urllib2.HTTPHandler)\n    request = urllib2.Request(info['url'], headers=info['headers'])\n    request.get_method = lambda: 'DELETE'\n\n    r = opener.open(request)\n    if r.getcode() != 200:\n        raise Exception(\"Non 200 response when calling, got: \" + str(r.getcode()))\n\n\ndef get_index_list(endpoint):\n    info = get_signature(endpoint, 'GET', '/_aliases')\n\n    request = urllib2.Request(info['url'], headers=info['headers'])\n    r = urllib2.urlopen(request)\n    if r.getcode() != 200:\n        raise Exception(\"Non 200 response when calling, got: \" + str(r.getcode()))\n\n    return r.read()\n\n\nif __name__ == '__main__':\n    lambda_handler({'account': 'account-1'}, None)\n"
                },
                "Description": "Removes old ElasticSearch indexes",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaESExecRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 60
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaCleanImagesRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:DescribeImages",
                                        "ec2:DeregisterImage"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "LambdaCleanBaseImagesPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LambdaESExecRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "es:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:es:*:*:*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "LambdaCleanBaseImagesPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LambdaErrorTopic": {
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "AlarmEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "LambdaReleaseErrorsAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "LambdaErrorTopic"
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": {
                            "Ref": "LambdaReleaseFunction"
                        }
                    }
                ],
                "EvaluationPeriods": 1,
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
                "Period": 300,
                "Statistic": "Maximum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "LambdaReleaseFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nimport operator\n\n\ndef clean_images(region, limit):\n    client = boto3.client('ec2', region)\n\n    response = client.describe_images(\n        Owners=['self'],\n        Filters=[{'Name': 'tag:Type', 'Values': ['ReleaseImage']}]\n    )\n\n    if len(response['Images']) == 0:\n        raise Exception('no AMIs with Type=BaseImage tag found')\n\n    images = {}\n    for image in response['Images']:\n        for tag in image['Tags']:\n            if tag['Key'] == \"Project\":\n                if tag['Value'] not in images.keys():\n                    images[tag['Value']] = {}\n                images[tag['Value']][image['ImageId']] = image['CreationDate']\n                break\n\n    to_remove = [];\n    for project in images:\n        sorted_x = sorted(images[project].items(), key=operator.itemgetter(1), reverse=True)\n        if len(sorted_x) > limit:\n            to_remove = to_remove + [i[0] for i in sorted_x[limit:]]\n\n    if len(to_remove) == 0:\n        print(\"Nothing to do\")\n        return 0\n\n    print(\"Will remove \" + str(len(to_remove)) + \" images\")\n\n    for ami in to_remove:\n        print(\"Removing: \" + ami)\n        client.deregister_image(ImageId=ami)\n\n\ndef lambda_handler(event, context):\n    clean_images('eu-west-1', 50)\n    clean_images('eu-central-1', 1)\n\n\nif __name__ == '__main__':\n    lambda_handler(None, None)\n"
                },
                "Description": "Clears Release AMI images",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaCleanImagesRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        }
    }
}
